#!/usr/bin/env php
<?php

# Bootstrap autoloader
require __DIR__.'/../vendor/autoload.php';

use splitbrain\phpcli\CLI;
use splitbrain\phpcli\Colors;
use splitbrain\phpcli\Options;
use splitbrain\phpcli\TableFormatter;
use Ixnode\PhpVault\Core;

class CliEnvSecure extends CLI
{
    const COMMAND_GENERATE_KEYS = 'generate-keys';

    const COMMAND_DISPLAY_ENV = 'display-env';

    const COMMAND_DISPLAY = 'display';

    const COMMAND_SET = 'set';

    const COMMAND_ENCRYPT_FILE = 'encrypt-file';

    const COMMAND_DECRYPT_FILE = 'decrypt-file';

    const COMMAND_INFO = 'info';


    const OPTION_VERSION = 'version';

    const OPTION_PUBLIC_KEY = 'public-key';

    const OPTION_PRIVATE_KEY = 'private-key';

    const OPTION_ENV_FILE = 'env-file';

    const OPTION_DISPLAY_DECRYPTED = 'display-decrypted';

    const OPTION_LOAD_ENCRYPTED = 'load-encrypted';

    const OPTION_WRITE_FILE = 'write-file';

    const OPTION_PERSIST = 'persist';


    const ARGUMENT_ENV_FILE = 'env-file';

    const ARGUMENT_NAME = 'name';

    const ARGUMENT_VALUE = 'value';

    const ARGUMENT_DESCRIPTION = 'description';


    const SETTING_MAX_WIDTH = 200;

    const SETTING_MAX_WIDTH_PPK = 74;


    const LIST_NAME = 'Name';

    const LIST_VALUE = 'Value';

    const LIST_DESCRIPTION = 'Description';

    const LIST_PPK_NAME = 'Name';

    const LIST_PPK_KEY = 'Key';

    const LIST_NAME_WIDTH = '25%';

    const LIST_VALUE_WIDTH = '25%';

    const LIST_DESCRIPTION_WIDTH = '*';

    const LIST_PPK_NAME_WIDTH = '12';

    const LIST_PPK_KEY_WIDTH = '*';

    const LIST_WIDTH_30 = '30';

    const LIST_WIDTH_ALL = '*';


    const LB = "\n";


    protected array $opt = array();

    protected string $root;

    /**
     * Register options and arguments.
     *
     * @param Options $options
     */
    protected function setup(Options $options)
    {
        /* Set help message */
        $options->setHelp('Manages encrypted environment files.');

        /* Register commands */
        $options->registerCommand(self::COMMAND_GENERATE_KEYS, 'Generates and displays a private and public key.');
        $options->registerCommand(self::COMMAND_DISPLAY_ENV, 'Displays the environment variables from server.');
        $options->registerCommand(self::COMMAND_DISPLAY, 'Displays the environment variables from given file.');
        $options->registerCommand(self::COMMAND_SET, 'Sets or updates a new variable. Needs a public key.');
        $options->registerCommand(self::COMMAND_ENCRYPT_FILE, 'Encrypts a given file. Needs a public key.');
        $options->registerCommand(self::COMMAND_DECRYPT_FILE, 'Decrypts a given file. Needs a private key.');
        $options->registerCommand(self::COMMAND_INFO, 'Shows information.');

        /* Register options */
        $options->registerOption(self::OPTION_VERSION, 'Print version.', 'v');

        /* Register generate key options */
        $options->registerOption(self::OPTION_PERSIST, 'Persists generated keys.', null, false, self::COMMAND_GENERATE_KEYS);

        /* Register display options */
        $options->registerOption(self::OPTION_PUBLIC_KEY, 'Specifies the public key.', null, self::OPTION_PUBLIC_KEY, self::COMMAND_DISPLAY);
        $options->registerOption(self::OPTION_PRIVATE_KEY, 'Specifies the private key.', null, self::OPTION_PRIVATE_KEY, self::COMMAND_DISPLAY);
        $options->registerOption(self::OPTION_ENV_FILE, 'Specifies the env file.', null, self::OPTION_ENV_FILE, self::COMMAND_DISPLAY);
        $options->registerOption(self::OPTION_DISPLAY_DECRYPTED, 'Specifies to show decrypted the contents.', null, false, self::COMMAND_DISPLAY);
        $options->registerOption(self::OPTION_LOAD_ENCRYPTED, 'Specifies to load encrypted contents.', null, false, self::COMMAND_DISPLAY);
        $options->registerOption(self::OPTION_WRITE_FILE, 'Writes the output also to given file.', null, self::OPTION_WRITE_FILE, self::COMMAND_DISPLAY);

        /* Register set options */
        $options->registerOption(self::OPTION_PUBLIC_KEY, 'Specifies the public key.', null, self::OPTION_PUBLIC_KEY, self::COMMAND_SET);
        $options->registerOption(self::OPTION_PRIVATE_KEY, 'Specifies the private key.', null, self::OPTION_PRIVATE_KEY, self::COMMAND_SET);

        /* Register set arguments */
        $options->registerArgument(self::ARGUMENT_ENV_FILE, 'Specifies the env file.', true, self::COMMAND_SET);
        $options->registerArgument(self::ARGUMENT_NAME, 'The name of the new variable.', true, self::COMMAND_SET);
        $options->registerArgument(self::ARGUMENT_VALUE, 'The value of the new variable.', true, self::COMMAND_SET);
        $options->registerArgument(self::ARGUMENT_DESCRIPTION, 'The description of the new variable.', false, self::COMMAND_SET);

        /* Register encrypt file arguments  */
        $options->registerArgument(self::ARGUMENT_ENV_FILE, 'Specifies the decrypted env file.', false, self::COMMAND_ENCRYPT_FILE);

        /* Register decrypt file arguments  */
        $options->registerArgument(self::ARGUMENT_ENV_FILE, 'Specifies the encrypted env file.', false, self::COMMAND_DECRYPT_FILE);

        /* Set root path */
        $this->root = dirname(dirname(__FILE__));
    }

    /**
     * Bootstrap function.
     *
     * @param Options $options
     * @throws SodiumException
     * @throws Exception
     */
    protected function main(Options $options)
    {
        if ($this->getOpt($options, 'version')) {
            $this->info(Core::VERSION);
            return;
        }

        /* Execute the command part. */
        switch ($options->getCmd()) {
            case self::COMMAND_GENERATE_KEYS: $this->mainGenerateKeys($options); break;
            case self::COMMAND_DISPLAY_ENV: $this->mainDisplayEnv($options); break;
            case self::COMMAND_DISPLAY: $this->mainDisplay($options); break;
            case self::COMMAND_SET: $this->mainSet($options); break;
            case self::COMMAND_ENCRYPT_FILE: $this->mainEncryptFile($options); break;
            case self::COMMAND_DECRYPT_FILE: $this->mainDecryptFile($options); break;
            case self::COMMAND_INFO: $this->mainShowInformation($options); break;
            default: $this->displayUnknownOrEmptyCommand($options);
        }
    }

    /**
     * Bootstrap generated keys function.
     *
     * @param Options $options
     */
    protected function mainGenerateKeys(Options $options)
    {
        /* Initiate the PhpVault Core */
        $core = new Core(true);

        /* Display the private and public key */
        $this->displayPrivateAndPublicKeys($options, $core);

        /* Persist keys */
        $this->persistKeys($options, $core);
    }

    /**
     * Bootstrap display environment function.
     *
     * @param Options $options
     * @throws Exception
     */
    protected function mainDisplayEnv(Options $options)
    {
        $this->displayServerEnvVariables($options);
    }

    /**
     * Bootstrap display function.
     *
     * @param Options $options
     * @throws SodiumException
     * @throws Exception
     */
    protected function mainDisplay(Options $options)
    {
        /* Check that the env file was given. */
        if ($this->getOpt($options, self::OPTION_ENV_FILE, null) === null) {
            $this->displayNoEnvFileGiven($options);
            return;
        }

        /* Check that the given env file exists. */
        if (!file_exists($this->getOpt($options, self::OPTION_ENV_FILE))) {
            $this->displayFileNotFound($options, $this->getOpt($options, self::OPTION_ENV_FILE));
            return;
        }

        /* Initiate the PhpVault Core */
        $core = new Core(false);

        /* Check that at least one key was given. */
        if ($this->getOpt($options, self::OPTION_PUBLIC_KEY, null) !== null) {
            $core->getKeyPair()->loadPublicKeyFromFile($this->getOpt($options, self::OPTION_PUBLIC_KEY));
        }

        /* Check that at least one key was given. */
        if ($this->getOpt($options, self::OPTION_PRIVATE_KEY, null) !== null) {
            $core->getKeyPair()->loadPrivateKeyFromFile($this->getOpt($options, self::OPTION_PRIVATE_KEY));
        }

        /* Load env file */
        $core->getVault()->getReader()->addFileToVault($this->getOpt($options, self::OPTION_ENV_FILE), $this->getOpt($options, self::OPTION_LOAD_ENCRYPTED));

        /* Displays the vault */
        $this->displayEnvVariables($options, $core);

        /* Writes the vault */
        $this->writeEnvVariables($options, $core);
    }

    /**
     * Bootstrap set function.
     *
     * @param Options $options
     * @throws SodiumException
     * @throws Exception
     */
    protected function mainSet(Options $options)
    {
        /* Reads the arguments */
        $envFile = $this->getArg($options, 0);
        $name = $this->getArg($options, 1);
        $value = $this->getArg($options, 2);
        $description = $this->getArg($options, 3);

        /* Set options */
        $this->setOpt(self::OPTION_LOAD_ENCRYPTED, true);
        $this->setOpt(self::OPTION_WRITE_FILE, $envFile);

        /* Check that the given env file exists. */
        if (!file_exists($envFile)) {
            $this->displayFileNotFound($options, $envFile);
            return;
        }

        /* Initiate the PhpVault Core */
        $core = new Core();

        /* Check that at least one key was given. */
        if ($this->getOpt($options, self::OPTION_PUBLIC_KEY, null) !== null) {
            $core->getKeyPair()->loadPublicKeyFromFile($this->getOpt($options, self::OPTION_PUBLIC_KEY));
        }

        /* Check that at least one key was given. */
        if ($this->getOpt($options, self::OPTION_PRIVATE_KEY, null) !== null) {
            $core->getKeyPair()->loadPrivateKeyFromFile($this->getOpt($options, self::OPTION_PRIVATE_KEY));
        }

        /* Load env file */
        $core->getVault()->getReader()->addFileToVault($envFile, $this->getOpt($options, self::OPTION_LOAD_ENCRYPTED));

        /* set new name value set */
        $core->getVault()->add($name, $value, $description);

        /* Displays the vault */
        $this->displayEnvVariables($options, $core);

        /* Writes the vault */
        $this->writeEnvVariables($options, $core, true);
    }

    /**
     * Encrypts the given decrypted file.
     *
     * @param Options $options
     * @throws SodiumException
     * @throws Exception
     */
    protected function mainEncryptFile(Options $options)
    {
        /* Reads the arguments */
        $envFileDecrypted = $this->getArg($options, 0);
        $envFileEncrypted = sprintf('%s.enc', $envFileDecrypted);

        /* Set options */
        $this->setOpt(self::OPTION_WRITE_FILE, $envFileEncrypted);
        $this->setOpt(self::OPTION_DISPLAY_DECRYPTED, false);

        /* Check if already encrypted */
        if (preg_match('~.+\.enc$~', $envFileDecrypted)) {
            $this->displayFileAlreadyEncrypted($options, $envFileDecrypted);
            return;
        }

        /* Check that the given env file exists. */
        if (!file_exists($envFileDecrypted)) {
            $this->displayFileNotFound($options, $envFileDecrypted);
            return;
        }

        /* Initiate the PhpVault Core */
        $core = new Core();

        /* Load env decrypted file */
        $core->getVault()->getReader()->addFileToVault($envFileDecrypted, false);

        /* Writes the vault */
        $this->writeEnvVariables($options, $core);
    }

    /**
     * Decrypts the given encrypted file.
     *
     * @param Options $options
     * @throws SodiumException
     * @throws Exception
     */
    protected function mainDecryptFile(Options $options)
    {
        /* Reads the arguments */
        $envFileEncrypted = $this->getArg($options, 0);

        /* Check the name of given file. */
        if (!preg_match('~\.enc$~', $envFileEncrypted)) {
            $this->displayFileEncryptedWrongFormat($options, $envFileEncrypted);
            return;
        }

        /* Builds decrypted file name */
        $envFileDecrypted = preg_replace('~\.enc$~', '', $envFileEncrypted);

        /* Set options */
        $this->setOpt(self::OPTION_WRITE_FILE, $envFileDecrypted);
        $this->setOpt(self::OPTION_DISPLAY_DECRYPTED, true);

        /* Check that the given env file exists. */
        if (!file_exists($envFileEncrypted)) {
            $this->displayFileNotFound($options, $envFileEncrypted);
            return;
        }

        /* Initiate the PhpVault Core */
        $core = new Core();

        /* Load env decrypted file */
        $core->getVault()->getReader()->addFileToVault($envFileEncrypted, true);

        /* Writes the vault */
        $this->writeEnvVariables($options, $core);
    }

    /**
     * Bootstrap show information function.
     *
     * @param Options $options
     */
    protected function mainShowInformation(Options $options)
    {
        /* Initiate the PhpVault Core */
        $core = new Core();

        /* No key was loaded */
        if (!$core->getKeyPair()->keyExistsWithinEnvironment()) {
            $this->displayNoKeyLoaded($options);
            return;
        }

        /* Private key was loaded */
        if ($core->getKeyPair()->getPrivate()) {
            $this->displayPrivateKeyLoaded($options, $core);
            return;
        }

        /* Private key was loaded */
        if ($core->getKeyPair()->getPublic()) {
            $this->displayPublicKeyLoaded($options, $core);
            return;
        }
    }

    /**
     * Displays the private and public keys.
     *
     * @param Options $options
     * @param Core $core
     */
    protected function displayPrivateAndPublicKeys(Options $options, Core $core)
    {
        /* Initialize the table formatter. */
        $tableFormatter = new TableFormatter($this->colors);
        $tableFormatter->setMaxWidth(self::SETTING_MAX_WIDTH_PPK);
        $tableFormatter->setBorder(' | ');

        /* Displays the header. */
        echo self::LB;
        echo $tableFormatter->format(
            array(self::LIST_PPK_NAME_WIDTH, self::LIST_PPK_KEY_WIDTH),
            array(self::LIST_PPK_NAME, self::LIST_PPK_KEY)
        );

        /* A line across the whole width */
        echo str_pad('', $tableFormatter->getMaxWidth(), '-') . "\n";

        /* Displays the private key */
        echo $tableFormatter->format(
            array(self::LIST_PPK_NAME_WIDTH, self::LIST_PPK_KEY_WIDTH),
            array('Private Key', $core->getKeyPair()->getPrivate()),
            array(Colors::C_CYAN, Colors::C_RED, Colors::C_GREEN)
        );

        /* Displays the public key */
        echo $tableFormatter->format(
            array(self::LIST_PPK_NAME_WIDTH, self::LIST_PPK_KEY_WIDTH),
            array('Public Key', $core->getKeyPair()->getPublic()),
            array(Colors::C_CYAN, Colors::C_RED, Colors::C_GREEN)
        );
    }

    /**
     * Displays all environment variables.
     *
     * @param Options $options
     * @param Core $core
     * @throws Exception
     */
    protected function displayEnvVariables(Options $options, Core $core)
    {
        /* Initialize the table formatter. */
        $tableFormatter = new TableFormatter($this->colors);
        $tableFormatter->setMaxWidth(self::SETTING_MAX_WIDTH);
        $tableFormatter->setBorder(' | ');

        /* Displays the header. */
        echo self::LB;
        echo $tableFormatter->format(
            array(self::LIST_NAME_WIDTH, self::LIST_VALUE_WIDTH, self::LIST_DESCRIPTION_WIDTH),
            array(self::LIST_NAME, self::LIST_VALUE, self::LIST_DESCRIPTION)
        );

        /* A line across the whole width */
        echo str_pad('', $tableFormatter->getMaxWidth(), '-') . "\n";

        /* Displays the content. */
        foreach ($core->getVault()->getAll(true, true, $this->getOpt($options, self::OPTION_DISPLAY_DECRYPTED)) as $key => $data) {
            echo $tableFormatter->format(
                array(self::LIST_NAME_WIDTH, self::LIST_VALUE_WIDTH, self::LIST_DESCRIPTION_WIDTH),
                array($key, $data->value, $data->description),
                array(Colors::C_CYAN, Colors::C_RED, Colors::C_GREEN)
            );
        }
    }

    /**
     * Writes all environment variables to file.
     *
     * @param Options $options
     * @param Core $core
     * @param bool $ignoreExistingFile
     * @throws Exception
     */
    protected function writeEnvVariables(Options $options, Core $core, bool $ignoreExistingFile = false)
    {
        /* Check if option was given to write a file. */
        if ($this->getOpt($options, self::OPTION_WRITE_FILE, null) === null) {
            return;
        }

        /* Check that the given env file exists. */
        if (!$ignoreExistingFile && file_exists($this->getOpt($options, self::OPTION_WRITE_FILE))) {
            throw new Exception(sprintf('File "%s" already exist. Abort.', $this->getOpt($options, self::OPTION_WRITE_FILE)));
        }

        /* Write file */
        $envFileString = $core->getVault()->getWriter()->getEnvString($this->getOpt($options, self::OPTION_DISPLAY_DECRYPTED), true);
        file_put_contents($this->getOpt($options, self::OPTION_WRITE_FILE), $envFileString);

        /* Check that the given env file was written. */
        if (!file_exists($this->getOpt($options, self::OPTION_WRITE_FILE))) {
            throw new Exception(sprintf('An error occurred while trying to write the env file "%s".', $this->getOpt($options, self::OPTION_WRITE_FILE)));
        }

        /* Print success */
        print "\n";
        $this->info(sprintf('The file was successfully written to "%s".', $this->getOpt($options, self::OPTION_WRITE_FILE)));
    }

    /**
     * Persist keys.
     *
     * @param Options $options
     * @param Core $core
     */
    protected function persistKeys(Options $options, Core $core)
    {
        $keyFolder = '.keys';
        $keyFolderAbsolute = sprintf('%s/%s', $this->root, $keyFolder);

        /* Check if persist option exists. */
        if ($this->getOpt($options, self::OPTION_PERSIST, null) === null) {
            return;
        }

        /* Check if target is a directory. */
        if (file_exists($keyFolderAbsolute)) {
            print "\n";
            $this->error('Path {path} already exists. If you want to persist the data, delete the folder.', array('path' => $keyFolderAbsolute));
            return;
        }

        /* Create key folder */
        mkdir($keyFolderAbsolute);

        /* private key */
        $privateKey = 'private.key';
        $privateKeyAbsolute = sprintf('%s/%s', $keyFolderAbsolute, $privateKey);

        /* public key */
        $publicKey = 'public.key';
        $publicKeyAbsolute = sprintf('%s/%s', $keyFolderAbsolute, $publicKey);

        /* gitignore */
        $gitignoreContent = <<<CONTENT
# ignore private key
/$privateKey
CONTENT;
        $gitignore = '.gitignore';
        $gitignoreAbsolute = sprintf('%s/%s', $keyFolderAbsolute, $gitignore);

        /* Write files */
        file_put_contents($privateKeyAbsolute, $core->getKeyPair()->getPrivate());
        file_put_contents($publicKeyAbsolute, $core->getKeyPair()->getPublic());
        file_put_contents($gitignoreAbsolute, $gitignoreContent);
    }

    /**
     * Displays all server environment variables.
     *
     * @param Options $options
     * @throws Exception
     */
    protected function displayServerEnvVariables(Options $options)
    {
        /* Initialize the table formatter. */
        $tableFormatter = new TableFormatter($this->colors);
        $tableFormatter->setMaxWidth(self::SETTING_MAX_WIDTH);
        $tableFormatter->setBorder(' | ');

        /* Displays the header. */
        echo self::LB;
        echo $tableFormatter->format(
            array(self::LIST_WIDTH_30, self::LIST_WIDTH_ALL),
            array(self::LIST_NAME, self::LIST_VALUE)
        );

        /* A line across the whole width */
        echo str_pad('', $tableFormatter->getMaxWidth(), '-') . "\n";

        /* Print all environment variables */
        foreach ($_SERVER as $key => $value) {
            if (gettype($value) !== 'string') {
                continue;
            }

            echo $tableFormatter->format(
                array(self::LIST_WIDTH_30, self::LIST_WIDTH_ALL),
                array($key, $value),
                array(Colors::C_CYAN, Colors::C_GREEN)
            );
        }
    }

    /**
     * Indicates that the command is unknown.
     *
     * @param Options $options
     */
    protected function displayUnknownOrEmptyCommand(Options $options)
    {
        $this->error('Unknown or empty command.');
        $this->showHelp($options, true);
    }

    /**
     * Indicates that no key was given.
     *
     * @param Options $options
     */
    protected function displayNoKeyGiven(Options $options)
    {
        $this->error('No key was given. Please specify one.');
        $this->showHelp($options, true);
    }

    /**
     * Indicates that no private key was given.
     *
     * @param Options $options
     */
    protected function displayNoPrivateKeyGiven(Options $options)
    {
        $this->error('No private key was given. Please specify one.');
        $this->showHelp($options, true);
    }

    /**
     * Indicates that no env file was given.
     *
     * @param Options $options
     */
    protected function displayNoEnvFileGiven(Options $options)
    {
        $this->error('No env file was given. Please specify one.');
        $this->showHelp($options, true);
    }

    /**
     * Indicates that given file was not found.
     *
     * @param Options $options
     * @param string $file
     */
    protected function displayFileNotFound(Options $options, string $file)
    {
        $this->error('The given file "{file}" was not found.', array('file' => $file, ));
        $this->showHelp($options, true);
    }

    /**
     * Indicates that given file was already encrypted.
     *
     * @param Options $options
     * @param string $file
     */
    protected function displayFileAlreadyEncrypted(Options $options, string $file)
    {
        $this->warning('The given file "{file}" seems already be encrypted. Abort.', array('file' => $file, ));
    }

    /**
     * Indicates that given file has the wrong format.
     *
     * @param Options $options
     * @param string $file
     */
    protected function displayFileEncryptedWrongFormat(Options $options, string $file)
    {
        $this->warning('The given file "{file}" must have the following format: "*.enc". Abort.', array('file' => $file, ));
    }

    /**
     * Indicates that no key was loaded.
     *
     * @param Options $options
     */
    protected function displayNoKeyLoaded(Options $options)
    {
        print "\n";
        $this->info('No key was loaded.');
    }

    /**
     * Indicates that a private key was loaded.
     *
     * @param Options $options
     * @param Core $core
     */
    protected function displayPrivateKeyLoaded(Options $options, Core $core)
    {
        print "\n";
        $this->info('Private key was loaded ({bytes} bytes).', array('bytes' => strlen($core->getKeyPair()->getPrivate())));
    }

    /**
     * Indicates that a public key was loaded.
     *
     * @param Options $options
     * @param Core $core
     */
    protected function displayPublicKeyLoaded(Options $options, Core $core)
    {
        print "\n";
        $this->info('Public key was loaded ({bytes} bytes).', array('bytes' => strlen($core->getKeyPair()->getPublic())));
    }

    /**
     * Displays the help.
     *
     * @param Options $options
     * @param bool $withLineBreak
     */
    protected function showHelp(Options $options, bool $withLineBreak = false)
    {
        echo sprintf('%s%s', $withLineBreak ? self::LB : '', $options->help());
    }

    /**
     * Returns the argument from command line.
     *
     * @param Options $options
     * @param int $index
     * @return mixed|null
     */
    protected function getArg(Options $options, int $index)
    {
        $args = $options->getArgs();

        return count($args) > $index ? $args[$index] : null;
    }

    /**
     * Sets a value to internal options array.
     *
     * @param string $name
     * @param mixed $value
     */
    protected function setOpt(string $name, mixed $value)
    {
        $this->opt[$name] = $value;
    }

    /**
     * Returns an option from command line or internal $options array.
     *
     * @param Options $options
     * @param string $name
     * @param ?bool|string $default
     * @return mixed
     */
    protected function getOpt(Options $options, string $name, $default = false): mixed
    {
        if (array_key_exists($name, $this->opt)) {
            return $this->opt[$name];
        }

        return $options->getOpt($name, $default);
    }
}

/* Start */
$cli = new CliEnvSecure();
$cli->run();
